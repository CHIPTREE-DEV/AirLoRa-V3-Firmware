
Sensor_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c4c  08003c4c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003c4c  08003c4c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c4c  08003c4c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000210  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c088  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b45  00000000  00000000  0002c113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000998  00000000  00000000  0002dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000779  00000000  00000000  0002e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c66f  00000000  00000000  0002ed69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d973  00000000  00000000  0004b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000aa54d  00000000  00000000  00058d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026f4  00000000  00000000  00103298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0010598c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bfc 	.word	0x08003bfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003bfc 	.word	0x08003bfc

080001c8 <Checksum>:
// Command to read concentration values
uint8_t Read_concentration_cmd[9] = {0xFF, 0x01, 0x86, 0, 0, 0, 0, 0, 0x79};

//checksum
static uint8_t Checksum (uint8_t* i,uint8_t ln)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	uint8_t j;
	uint8_t tempq = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
	i+=1;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3301      	adds	r3, #1
 80001dc:	607b      	str	r3, [r7, #4]
	for (j=0;j<(ln-2);j++)
 80001de:	2300      	movs	r3, #0
 80001e0:	73fb      	strb	r3, [r7, #15]
 80001e2:	e00a      	b.n	80001fa <Checksum+0x32>
	{
		tempq +=*i;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	781a      	ldrb	r2, [r3, #0]
 80001e8:	7bbb      	ldrb	r3, [r7, #14]
 80001ea:	4413      	add	r3, r2
 80001ec:	73bb      	strb	r3, [r7, #14]
		i++;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3301      	adds	r3, #1
 80001f2:	607b      	str	r3, [r7, #4]
	for (j=0;j<(ln-2);j++)
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	3301      	adds	r3, #1
 80001f8:	73fb      	strb	r3, [r7, #15]
 80001fa:	7bfa      	ldrb	r2, [r7, #15]
 80001fc:	78fb      	ldrb	r3, [r7, #3]
 80001fe:	3b02      	subs	r3, #2
 8000200:	429a      	cmp	r2, r3
 8000202:	dbef      	blt.n	80001e4 <Checksum+0x1c>
	}
	tempq = (~tempq)+1;
 8000204:	7bbb      	ldrb	r3, [r7, #14]
 8000206:	425b      	negs	r3, r3
 8000208:	73bb      	strb	r3, [r7, #14]
	return (tempq);
 800020a:	7bbb      	ldrb	r3, [r7, #14]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <extractConcentration>:

// Function to extract concentration from sensor data and return it as uint8_t
uint8_t extractConcentration(uint8_t *data, float multiplier) {
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	ed87 0a00 	vstr	s0, [r7]
    int high_byte = data[2];
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3302      	adds	r3, #2
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	613b      	str	r3, [r7, #16]
    int low_byte = data[3];
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3303      	adds	r3, #3
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	60fb      	str	r3, [r7, #12]
    int concentration = ((high_byte << 8) | low_byte) * multiplier;
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	021a      	lsls	r2, r3, #8
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	4313      	orrs	r3, r2
 800023c:	ee07 3a90 	vmov	s15, r3
 8000240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000244:	edd7 7a00 	vldr	s15, [r7]
 8000248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800024c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000250:	ee17 3a90 	vmov	r3, s15
 8000254:	617b      	str	r3, [r7, #20]

    // Clamp the concentration to fit into uint8_t range
    if (concentration > 255) {
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	2bff      	cmp	r3, #255	; 0xff
 800025a:	dd02      	ble.n	8000262 <extractConcentration+0x4a>
        concentration = 255;
 800025c:	23ff      	movs	r3, #255	; 0xff
 800025e:	617b      	str	r3, [r7, #20]
 8000260:	e004      	b.n	800026c <extractConcentration+0x54>
    } else if (concentration < 0) {
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	2b00      	cmp	r3, #0
 8000266:	da01      	bge.n	800026c <extractConcentration+0x54>
        concentration = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	617b      	str	r3, [r7, #20]
    }

    return (uint8_t)concentration;
 800026c:	697b      	ldr	r3, [r7, #20]
 800026e:	b2db      	uxtb	r3, r3
}
 8000270:	4618      	mov	r0, r3
 8000272:	371c      	adds	r7, #28
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <readSensorData>:

// Function to read sensor data
void readSensorData(uint16_t addr, uint8_t *ppm, float multiplier) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b08a      	sub	sp, #40	; 0x28
 8000280:	af02      	add	r7, sp, #8
 8000282:	4603      	mov	r3, r0
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	ed87 0a01 	vstr	s0, [r7, #4]
 800028a:	81fb      	strh	r3, [r7, #14]
    uint8_t sensorData[9];

    if (HAL_I2C_Master_Transmit(&hi2c1, addr, Read_concentration_cmd, sizeof(Read_concentration_cmd), 1000) == HAL_OK) {
 800028c:	89f9      	ldrh	r1, [r7, #14]
 800028e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2309      	movs	r3, #9
 8000296:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <readSensorData+0x8c>)
 8000298:	481c      	ldr	r0, [pc, #112]	; (800030c <readSensorData+0x90>)
 800029a:	f000 ff13 	bl	80010c4 <HAL_I2C_Master_Transmit>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d12c      	bne.n	80002fe <readSensorData+0x82>
        HAL_Delay(10); // Short delay before receiving to give sensor time to prepare data
 80002a4:	200a      	movs	r0, #10
 80002a6:	f000 fbf9 	bl	8000a9c <HAL_Delay>

        if (HAL_I2C_Master_Receive(&hi2c1, addr, sensorData, sizeof(sensorData), 1000) == HAL_OK) {
 80002aa:	f107 0214 	add.w	r2, r7, #20
 80002ae:	89f9      	ldrh	r1, [r7, #14]
 80002b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2309      	movs	r3, #9
 80002b8:	4814      	ldr	r0, [pc, #80]	; (800030c <readSensorData+0x90>)
 80002ba:	f000 fff7 	bl	80012ac <HAL_I2C_Master_Receive>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d11c      	bne.n	80002fe <readSensorData+0x82>
            uint8_t calculate_checksum = Checksum(sensorData, sizeof(sensorData));
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2109      	movs	r1, #9
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff7c 	bl	80001c8 <Checksum>
 80002d0:	4603      	mov	r3, r0
 80002d2:	77fb      	strb	r3, [r7, #31]

            if (sensorData[0] == 0xFF && sensorData[1] == 0x86 && calculate_checksum == sensorData[8]) {
 80002d4:	7d3b      	ldrb	r3, [r7, #20]
 80002d6:	2bff      	cmp	r3, #255	; 0xff
 80002d8:	d111      	bne.n	80002fe <readSensorData+0x82>
 80002da:	7d7b      	ldrb	r3, [r7, #21]
 80002dc:	2b86      	cmp	r3, #134	; 0x86
 80002de:	d10e      	bne.n	80002fe <readSensorData+0x82>
 80002e0:	7f3b      	ldrb	r3, [r7, #28]
 80002e2:	7ffa      	ldrb	r2, [r7, #31]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d10a      	bne.n	80002fe <readSensorData+0x82>
                *ppm = extractConcentration(sensorData, multiplier);
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	ed97 0a01 	vldr	s0, [r7, #4]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff91 	bl	8000218 <extractConcentration>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 80002fe:	bf00      	nop
 8000300:	3720      	adds	r7, #32
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000000 	.word	0x20000000
 800030c:	20000034 	.word	0x20000034

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fb5c 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f82a 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f95a 	bl	80005d4 <MX_GPIO_Init>
  MX_UART4_Init();
 8000320:	f000 f8c8 	bl	80004b4 <MX_UART4_Init>
  MX_UART5_Init();
 8000324:	f000 f8f6 	bl	8000514 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000328:	f000 f924 	bl	8000574 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800032c:	f000 f882 	bl	8000434 <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      readSensorData(O3_ADDR, &O3_PPM,0.1);
 8000330:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000360 <main+0x50>
 8000334:	490b      	ldr	r1, [pc, #44]	; (8000364 <main+0x54>)
 8000336:	20e8      	movs	r0, #232	; 0xe8
 8000338:	f7ff ffa0 	bl	800027c <readSensorData>
      readSensorData(NO2_ADDR, &NO2_PPM,0.1);
 800033c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000360 <main+0x50>
 8000340:	4909      	ldr	r1, [pc, #36]	; (8000368 <main+0x58>)
 8000342:	20ea      	movs	r0, #234	; 0xea
 8000344:	f7ff ff9a 	bl	800027c <readSensorData>
      readSensorData(CO_ADDR, &CO_PPM,1.0);
 8000348:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <main+0x5c>)
 800034e:	20ec      	movs	r0, #236	; 0xec
 8000350:	f7ff ff94 	bl	800027c <readSensorData>
      HAL_Delay(1000);
 8000354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000358:	f000 fba0 	bl	8000a9c <HAL_Delay>
      readSensorData(O3_ADDR, &O3_PPM,0.1);
 800035c:	e7e8      	b.n	8000330 <main+0x20>
 800035e:	bf00      	nop
 8000360:	3dcccccd 	.word	0x3dcccccd
 8000364:	20000220 	.word	0x20000220
 8000368:	20000221 	.word	0x20000221
 800036c:	20000222 	.word	0x20000222

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b09e      	sub	sp, #120	; 0x78
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800037a:	2228      	movs	r2, #40	; 0x28
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fc0f 	bl	8003ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000394:	463b      	mov	r3, r7
 8000396:	223c      	movs	r2, #60	; 0x3c
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f003 fc01 	bl	8003ba2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003a0:	2303      	movs	r3, #3
 80003a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ae:	2301      	movs	r3, #1
 80003b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b2:	2310      	movs	r3, #16
 80003b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b6:	2302      	movs	r3, #2
 80003b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fb8e 	bl	8001aec <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003d6:	f000 f945 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003de:	2302      	movs	r3, #2
 80003e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fbb6 	bl	8002b68 <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000402:	f000 f92f 	bl	8000664 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000406:	233a      	movs	r3, #58	; 0x3a
 8000408:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800041a:	463b      	mov	r3, r7
 800041c:	4618      	mov	r0, r3
 800041e:	f002 fdd9 	bl	8002fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000428:	f000 f91c 	bl	8000664 <Error_Handler>
  }
}
 800042c:	bf00      	nop
 800042e:	3778      	adds	r7, #120	; 0x78
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_I2C1_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <MX_I2C1_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <MX_I2C1_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_I2C1_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_I2C1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000470:	f000 fd98 	bl	8000fa4 <HAL_I2C_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 f8f3 	bl	8000664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4809      	ldr	r0, [pc, #36]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000482:	f001 fa9b 	bl	80019bc <HAL_I2CEx_ConfigAnalogFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 f8ea 	bl	8000664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000490:	2100      	movs	r1, #0
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_I2C1_Init+0x74>)
 8000494:	f001 fadd 	bl	8001a52 <HAL_I2CEx_ConfigDigitalFilter>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 f8e1 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000034 	.word	0x20000034
 80004ac:	40005400 	.word	0x40005400
 80004b0:	2000090e 	.word	0x2000090e

080004b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_UART4_Init+0x58>)
 80004ba:	4a15      	ldr	r2, [pc, #84]	; (8000510 <MX_UART4_Init+0x5c>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_UART4_Init+0x58>)
 80004c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_UART4_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_UART4_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_UART4_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_UART4_Init+0x58>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_UART4_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_UART4_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_UART4_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_UART4_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_UART4_Init+0x58>)
 80004f8:	f002 ff1c 	bl	8003334 <HAL_UART_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000502:	f000 f8af 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000088 	.word	0x20000088
 8000510:	40004c00 	.word	0x40004c00

08000514 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_UART5_Init+0x58>)
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <MX_UART5_Init+0x5c>)
 800051c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_UART5_Init+0x58>)
 8000520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000524:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_UART5_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_UART5_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_UART5_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_UART5_Init+0x58>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_UART5_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_UART5_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_UART5_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_UART5_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_UART5_Init+0x58>)
 8000558:	f002 feec 	bl	8003334 <HAL_UART_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000562:	f000 f87f 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000110 	.word	0x20000110
 8000570:	40005000 	.word	0x40005000

08000574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <MX_USART2_UART_Init+0x5c>)
 800057c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000580:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005b8:	f002 febc 	bl	8003334 <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005c2:	f000 f84f 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000198 	.word	0x20000198
 80005d0:	40004400 	.word	0x40004400

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_GPIO_Init+0x8c>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a20      	ldr	r2, [pc, #128]	; (8000660 <MX_GPIO_Init+0x8c>)
 80005e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_GPIO_Init+0x8c>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_GPIO_Init+0x8c>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <MX_GPIO_Init+0x8c>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_GPIO_Init+0x8c>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_GPIO_Init+0x8c>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0x8c>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_MspInit+0x44>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_MspInit+0x44>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_MspInit+0x44>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_MspInit+0x44>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a26      	ldr	r2, [pc, #152]	; (8000770 <HAL_I2C_MspInit+0xb8>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d145      	bne.n	8000766 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a25      	ldr	r2, [pc, #148]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 80006f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800070a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000710:	2312      	movs	r3, #18
 8000712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071c:	2304      	movs	r3, #4
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fac1 	bl	8000cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000732:	2312      	movs	r3, #18
 8000734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073e:	2304      	movs	r3, #4
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <HAL_I2C_MspInit+0xc0>)
 800074a:	f000 fab1 	bl	8000cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 8000754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_I2C_MspInit+0xbc>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40005400 	.word	0x40005400
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	; 0x38
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a54      	ldr	r2, [pc, #336]	; (80008ec <HAL_UART_MspInit+0x170>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d129      	bne.n	80007f2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800079e:	4b54      	ldr	r3, [pc, #336]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a53      	ldr	r2, [pc, #332]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80007a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b51      	ldr	r3, [pc, #324]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b4e      	ldr	r3, [pc, #312]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a4d      	ldr	r2, [pc, #308]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80007bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b4b      	ldr	r3, [pc, #300]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80007e0:	2305      	movs	r3, #5
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4842      	ldr	r0, [pc, #264]	; (80008f4 <HAL_UART_MspInit+0x178>)
 80007ec:	f000 fa60 	bl	8000cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f0:	e078      	b.n	80008e4 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==UART5)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a40      	ldr	r2, [pc, #256]	; (80008f8 <HAL_UART_MspInit+0x17c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d145      	bne.n	8000888 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80007fc:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	4a3b      	ldr	r2, [pc, #236]	; (80008f0 <HAL_UART_MspInit+0x174>)
 8000802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000806:	61d3      	str	r3, [r2, #28]
 8000808:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <HAL_UART_MspInit+0x174>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000814:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <HAL_UART_MspInit+0x174>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	4a35      	ldr	r2, [pc, #212]	; (80008f0 <HAL_UART_MspInit+0x174>)
 800081a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800081e:	6153      	str	r3, [r2, #20]
 8000820:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <HAL_UART_MspInit+0x174>)
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800082c:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <HAL_UART_MspInit+0x174>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <HAL_UART_MspInit+0x174>)
 8000832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000836:	6153      	str	r3, [r2, #20]
 8000838:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <HAL_UART_MspInit+0x174>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000856:	2305      	movs	r3, #5
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4824      	ldr	r0, [pc, #144]	; (80008f4 <HAL_UART_MspInit+0x178>)
 8000862:	f000 fa25 	bl	8000cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000866:	2304      	movs	r3, #4
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000876:	2305      	movs	r3, #5
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	4619      	mov	r1, r3
 8000880:	481e      	ldr	r0, [pc, #120]	; (80008fc <HAL_UART_MspInit+0x180>)
 8000882:	f000 fa15 	bl	8000cb0 <HAL_GPIO_Init>
}
 8000886:	e02d      	b.n	80008e4 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <HAL_UART_MspInit+0x184>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d128      	bne.n	80008e4 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x174>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <HAL_UART_MspInit+0x174>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	6153      	str	r3, [r2, #20]
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_UART_MspInit+0x174>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c2:	230c      	movs	r3, #12
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d2:	2307      	movs	r3, #7
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f000 f9e6 	bl	8000cb0 <HAL_GPIO_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3738      	adds	r7, #56	; 0x38
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40004c00 	.word	0x40004c00
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000800 	.word	0x48000800
 80008f8:	40005000 	.word	0x40005000
 80008fc:	48000c00 	.word	0x48000c00
 8000900:	40004400 	.word	0x40004400

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f884 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 f903 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ae:	f7ff fcaf 	bl	8000310 <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80009c0:	08003c54 	.word	0x08003c54
  ldr r2, =_sbss
 80009c4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80009c8:	20000228 	.word	0x20000228

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x28>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x28>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f931 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff fe40 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f93b 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a38:	f000 f911 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000000c 	.word	0x2000000c
 8000a54:	20000014 	.word	0x20000014
 8000a58:	20000010 	.word	0x20000010

08000a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000014 	.word	0x20000014
 8000a80:	20000224 	.word	0x20000224

08000a84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000224 	.word	0x20000224

08000a9c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff ffee 	bl	8000a84 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_Delay+0x44>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff ffde 	bl	8000a84 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000014 	.word	0x20000014

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f7ff ff8e 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff47 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff5c 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff8e 	bl	8000b9c <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffb0 	bl	8000c04 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbe:	e154      	b.n	8000f6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8146 	beq.w	8000f64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d005      	beq.n	8000cf0 <HAL_GPIO_Init+0x40>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 0201 	and.w	r2, r3, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d017      	beq.n	8000d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d123      	bne.n	8000de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	6939      	ldr	r1, [r7, #16]
 8000dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0203 	and.w	r2, r3, #3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80a0 	beq.w	8000f64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e24:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a57      	ldr	r2, [pc, #348]	; (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e3c:	4a53      	ldr	r2, [pc, #332]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e66:	d019      	beq.n	8000e9c <HAL_GPIO_Init+0x1ec>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <HAL_GPIO_Init+0x2e0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d013      	beq.n	8000e98 <HAL_GPIO_Init+0x1e8>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a48      	ldr	r2, [pc, #288]	; (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d00d      	beq.n	8000e94 <HAL_GPIO_Init+0x1e4>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a47      	ldr	r2, [pc, #284]	; (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d007      	beq.n	8000e90 <HAL_GPIO_Init+0x1e0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a46      	ldr	r2, [pc, #280]	; (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d101      	bne.n	8000e8c <HAL_GPIO_Init+0x1dc>
 8000e88:	2304      	movs	r3, #4
 8000e8a:	e008      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e90:	2303      	movs	r3, #3
 8000e92:	e004      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	f002 0203 	and.w	r2, r2, #3
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eae:	4937      	ldr	r1, [pc, #220]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee0:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f0a:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f47f aea3 	bne.w	8000cc0 <HAL_GPIO_Init+0x10>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e081      	b.n	80010ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fb74 	bl	80006b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2224      	movs	r2, #36	; 0x24
 8000fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d107      	bne.n	800101e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	e006      	b.n	800102c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800102a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d104      	bne.n	800103e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800103c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001050:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001060:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69d9      	ldr	r1, [r3, #28]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	461a      	mov	r2, r3
 80010d0:	460b      	mov	r3, r1
 80010d2:	817b      	strh	r3, [r7, #10]
 80010d4:	4613      	mov	r3, r2
 80010d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	f040 80da 	bne.w	800129a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_I2C_Master_Transmit+0x30>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e0d3      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010fc:	f7ff fcc2 	bl	8000a84 <HAL_GetTick>
 8001100:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2319      	movs	r3, #25
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f000 f9e6 	bl	80014e0 <I2C_WaitOnFlagUntilTimeout>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0be      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2221      	movs	r2, #33	; 0x21
 8001122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2210      	movs	r2, #16
 800112a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	893a      	ldrh	r2, [r7, #8]
 800113e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114a:	b29b      	uxth	r3, r3
 800114c:	2bff      	cmp	r3, #255	; 0xff
 800114e:	d90e      	bls.n	800116e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	8979      	ldrh	r1, [r7, #10]
 800115e:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 fbf6 	bl	8001958 <I2C_TransferConfig>
 800116c:	e06c      	b.n	8001248 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001172:	b29a      	uxth	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117c:	b2da      	uxtb	r2, r3
 800117e:	8979      	ldrh	r1, [r7, #10]
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 fbe5 	bl	8001958 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800118e:	e05b      	b.n	8001248 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	6a39      	ldr	r1, [r7, #32]
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f9f2 	bl	800157e <I2C_WaitOnTXISFlagUntilTimeout>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e07b      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d034      	beq.n	8001248 <HAL_I2C_Master_Transmit+0x184>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d130      	bne.n	8001248 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	2200      	movs	r2, #0
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f975 	bl	80014e0 <I2C_WaitOnFlagUntilTimeout>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e04d      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001204:	b29b      	uxth	r3, r3
 8001206:	2bff      	cmp	r3, #255	; 0xff
 8001208:	d90e      	bls.n	8001228 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	22ff      	movs	r2, #255	; 0xff
 800120e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001214:	b2da      	uxtb	r2, r3
 8001216:	8979      	ldrh	r1, [r7, #10]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 fb99 	bl	8001958 <I2C_TransferConfig>
 8001226:	e00f      	b.n	8001248 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122c:	b29a      	uxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001236:	b2da      	uxtb	r2, r3
 8001238:	8979      	ldrh	r1, [r7, #10]
 800123a:	2300      	movs	r3, #0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 fb88 	bl	8001958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124c:	b29b      	uxth	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d19e      	bne.n	8001190 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	6a39      	ldr	r1, [r7, #32]
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 f9d8 	bl	800160c <I2C_WaitOnSTOPFlagUntilTimeout>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e01a      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2220      	movs	r2, #32
 800126c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800127a:	400b      	ands	r3, r1
 800127c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800129a:	2302      	movs	r3, #2
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	80002000 	.word	0x80002000
 80012a8:	fe00e800 	.word	0xfe00e800

080012ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	461a      	mov	r2, r3
 80012b8:	460b      	mov	r3, r1
 80012ba:	817b      	strh	r3, [r7, #10]
 80012bc:	4613      	mov	r3, r2
 80012be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b20      	cmp	r3, #32
 80012ca:	f040 80db 	bne.w	8001484 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_I2C_Master_Receive+0x30>
 80012d8:	2302      	movs	r3, #2
 80012da:	e0d4      	b.n	8001486 <HAL_I2C_Master_Receive+0x1da>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012e4:	f7ff fbce 	bl	8000a84 <HAL_GetTick>
 80012e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2319      	movs	r3, #25
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f8f2 	bl	80014e0 <I2C_WaitOnFlagUntilTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0bf      	b.n	8001486 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2222      	movs	r2, #34	; 0x22
 800130a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2210      	movs	r2, #16
 8001312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	893a      	ldrh	r2, [r7, #8]
 8001326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001332:	b29b      	uxth	r3, r3
 8001334:	2bff      	cmp	r3, #255	; 0xff
 8001336:	d90e      	bls.n	8001356 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	22ff      	movs	r2, #255	; 0xff
 800133c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001342:	b2da      	uxtb	r2, r3
 8001344:	8979      	ldrh	r1, [r7, #10]
 8001346:	4b52      	ldr	r3, [pc, #328]	; (8001490 <HAL_I2C_Master_Receive+0x1e4>)
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 fb02 	bl	8001958 <I2C_TransferConfig>
 8001354:	e06d      	b.n	8001432 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135a:	b29a      	uxth	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001364:	b2da      	uxtb	r2, r3
 8001366:	8979      	ldrh	r1, [r7, #10]
 8001368:	4b49      	ldr	r3, [pc, #292]	; (8001490 <HAL_I2C_Master_Receive+0x1e4>)
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 faf1 	bl	8001958 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001376:	e05c      	b.n	8001432 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	6a39      	ldr	r1, [r7, #32]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f989 	bl	8001694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e07c      	b.n	8001486 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	3b01      	subs	r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d034      	beq.n	8001432 <HAL_I2C_Master_Receive+0x186>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d130      	bne.n	8001432 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	2200      	movs	r2, #0
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f880 	bl	80014e0 <I2C_WaitOnFlagUntilTimeout>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e04d      	b.n	8001486 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2bff      	cmp	r3, #255	; 0xff
 80013f2:	d90e      	bls.n	8001412 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	8979      	ldrh	r1, [r7, #10]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 faa4 	bl	8001958 <I2C_TransferConfig>
 8001410:	e00f      	b.n	8001432 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001420:	b2da      	uxtb	r2, r3
 8001422:	8979      	ldrh	r1, [r7, #10]
 8001424:	2300      	movs	r3, #0
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 fa93 	bl	8001958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001436:	b29b      	uxth	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d19d      	bne.n	8001378 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	6a39      	ldr	r1, [r7, #32]
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 f8e3 	bl	800160c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e01a      	b.n	8001486 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2220      	movs	r2, #32
 8001456:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_I2C_Master_Receive+0x1e8>)
 8001464:	400b      	ands	r3, r1
 8001466:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2220      	movs	r2, #32
 800146c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	e000      	b.n	8001486 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001484:	2302      	movs	r3, #2
  }
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	80002400 	.word	0x80002400
 8001494:	fe00e800 	.word	0xfe00e800

08001498 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d103      	bne.n	80014b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d007      	beq.n	80014d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	619a      	str	r2, [r3, #24]
  }
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014f0:	e031      	b.n	8001556 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f8:	d02d      	beq.n	8001556 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014fa:	f7ff fac3 	bl	8000a84 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d302      	bcc.n	8001510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d122      	bne.n	8001556 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699a      	ldr	r2, [r3, #24]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	4013      	ands	r3, r2
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	429a      	cmp	r2, r3
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	429a      	cmp	r2, r3
 800152c:	d113      	bne.n	8001556 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f043 0220 	orr.w	r2, r3, #32
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699a      	ldr	r2, [r3, #24]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4013      	ands	r3, r2
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	bf0c      	ite	eq
 8001566:	2301      	moveq	r3, #1
 8001568:	2300      	movne	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	429a      	cmp	r2, r3
 8001572:	d0be      	beq.n	80014f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800158a:	e033      	b.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f901 	bl	8001798 <I2C_IsErrorOccurred>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e031      	b.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a6:	d025      	beq.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a8:	f7ff fa6c 	bl	8000a84 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d302      	bcc.n	80015be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d11a      	bne.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d013      	beq.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	f043 0220 	orr.w	r2, r3, #32
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2220      	movs	r2, #32
 80015dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e007      	b.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d1c4      	bne.n	800158c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001618:	e02f      	b.n	800167a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f8ba 	bl	8001798 <I2C_IsErrorOccurred>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e02d      	b.n	800168a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162e:	f7ff fa29 	bl	8000a84 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	429a      	cmp	r2, r3
 800163c:	d302      	bcc.n	8001644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d11a      	bne.n	800167a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	2b20      	cmp	r3, #32
 8001650:	d013      	beq.n	800167a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f043 0220 	orr.w	r2, r3, #32
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2220      	movs	r2, #32
 8001662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e007      	b.n	800168a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b20      	cmp	r3, #32
 8001686:	d1c8      	bne.n	800161a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80016a0:	e06b      	b.n	800177a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f876 	bl	8001798 <I2C_IsErrorOccurred>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e069      	b.n	800178a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d138      	bne.n	8001736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d105      	bne.n	80016de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e055      	b.n	800178a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d107      	bne.n	80016fc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2210      	movs	r2, #16
 80016f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2204      	movs	r2, #4
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
 80016fa:	e002      	b.n	8001702 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2220      	movs	r2, #32
 8001708:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001716:	400b      	ands	r3, r1
 8001718:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e029      	b.n	800178a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001736:	f7ff f9a5 	bl	8000a84 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	d302      	bcc.n	800174c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d116      	bne.n	800177a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b04      	cmp	r3, #4
 8001758:	d00f      	beq.n	800177a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f043 0220 	orr.w	r2, r3, #32
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2220      	movs	r2, #32
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e007      	b.n	800178a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b04      	cmp	r3, #4
 8001786:	d18c      	bne.n	80016a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	fe00e800 	.word	0xfe00e800

08001798 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d068      	beq.n	8001896 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2210      	movs	r2, #16
 80017ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017cc:	e049      	b.n	8001862 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d4:	d045      	beq.n	8001862 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017d6:	f7ff f955 	bl	8000a84 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d302      	bcc.n	80017ec <I2C_IsErrorOccurred+0x54>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d13a      	bne.n	8001862 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80017fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800180e:	d121      	bne.n	8001854 <I2C_IsErrorOccurred+0xbc>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001816:	d01d      	beq.n	8001854 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001818:	7cfb      	ldrb	r3, [r7, #19]
 800181a:	2b20      	cmp	r3, #32
 800181c:	d01a      	beq.n	8001854 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800182c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800182e:	f7ff f929 	bl	8000a84 <HAL_GetTick>
 8001832:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001834:	e00e      	b.n	8001854 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001836:	f7ff f925 	bl	8000a84 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b19      	cmp	r3, #25
 8001842:	d907      	bls.n	8001854 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f043 0320 	orr.w	r3, r3, #32
 800184a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001852:	e006      	b.n	8001862 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	2b20      	cmp	r3, #32
 8001860:	d1e9      	bne.n	8001836 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b20      	cmp	r3, #32
 800186e:	d003      	beq.n	8001878 <I2C_IsErrorOccurred+0xe0>
 8001870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0aa      	beq.n	80017ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800187c:	2b00      	cmp	r3, #0
 800187e:	d103      	bne.n	8001888 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2220      	movs	r2, #32
 8001886:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001908:	2b00      	cmp	r3, #0
 800190a:	d01c      	beq.n	8001946 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff fdc3 	bl	8001498 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <I2C_IsErrorOccurred+0x1bc>)
 800191e:	400b      	ands	r3, r1
 8001920:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	431a      	orrs	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800194a:	4618      	mov	r0, r3
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	fe00e800 	.word	0xfe00e800

08001958 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	817b      	strh	r3, [r7, #10]
 8001966:	4613      	mov	r3, r2
 8001968:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800196a:	897b      	ldrh	r3, [r7, #10]
 800196c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001970:	7a7b      	ldrb	r3, [r7, #9]
 8001972:	041b      	lsls	r3, r3, #16
 8001974:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001978:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	4313      	orrs	r3, r2
 8001982:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001986:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	0d5b      	lsrs	r3, r3, #21
 8001992:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <I2C_TransferConfig+0x60>)
 8001998:	430b      	orrs	r3, r1
 800199a:	43db      	mvns	r3, r3
 800199c:	ea02 0103 	and.w	r1, r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019aa:	bf00      	nop
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	03ff63ff 	.word	0x03ff63ff

080019bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d138      	bne.n	8001a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019dc:	2302      	movs	r3, #2
 80019de:	e032      	b.n	8001a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2224      	movs	r2, #36	; 0x24
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a44:	2302      	movs	r3, #2
  }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d139      	bne.n	8001adc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e033      	b.n	8001ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2224      	movs	r2, #36	; 0x24
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0201 	bic.w	r2, r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e000      	b.n	8001ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001adc:	2302      	movs	r3, #2
  }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f001 b823 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 817d 	beq.w	8001e22 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b28:	4bbc      	ldr	r3, [pc, #752]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b34:	4bb9      	ldr	r3, [pc, #740]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d15c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x10e>
 8001b40:	4bb6      	ldr	r3, [pc, #728]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d155      	bne.n	8001bfa <HAL_RCC_OscConfig+0x10e>
 8001b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b52:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_RCC_OscConfig+0x94>
 8001b7a:	4ba8      	ldr	r3, [pc, #672]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	e015      	b.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b84:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ba8:	4b9c      	ldr	r3, [pc, #624]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001bb4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bb8:	fa92 f2a2 	rbit	r2, r2
 8001bbc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001bc0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f002 021f 	and.w	r2, r2, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 811f 	beq.w	8001e20 <HAL_RCC_OscConfig+0x334>
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 8116 	bne.w	8001e20 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f000 bfaf 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12e>
 8001c0c:	4b83      	ldr	r3, [pc, #524]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a82      	ldr	r2, [pc, #520]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e036      	b.n	8001c88 <HAL_RCC_OscConfig+0x19c>
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x158>
 8001c2a:	4b7c      	ldr	r3, [pc, #496]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7b      	ldr	r2, [pc, #492]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b79      	ldr	r3, [pc, #484]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a78      	ldr	r2, [pc, #480]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e021      	b.n	8001c88 <HAL_RCC_OscConfig+0x19c>
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x184>
 8001c56:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a70      	ldr	r2, [pc, #448]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6d      	ldr	r2, [pc, #436]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0x19c>
 8001c70:	4b6a      	ldr	r3, [pc, #424]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a69      	ldr	r2, [pc, #420]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b67      	ldr	r3, [pc, #412]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a66      	ldr	r2, [pc, #408]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c88:	4b64      	ldr	r3, [pc, #400]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	f023 020f 	bic.w	r2, r3, #15
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	495f      	ldr	r1, [pc, #380]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d059      	beq.n	8001d66 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe fee7 	bl	8000a84 <HAL_GetTick>
 8001cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7fe fee2 	bl	8000a84 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d902      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f000 bf43 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 8001cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ce6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_OscConfig+0x218>
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e015      	b.n	8001d30 <HAL_RCC_OscConfig+0x244>
 8001d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d08:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d20:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d2c:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d34:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d38:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d3c:	fa92 f2a2 	rbit	r2, r2
 8001d40:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d44:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d48:	fab2 f282 	clz	r2, r2
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	f002 021f 	and.w	r2, r2, #31
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ab      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1d0>
 8001d64:	e05d      	b.n	8001e22 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7fe fe8d 	bl	8000a84 <HAL_GetTick>
 8001d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d70:	f7fe fe88 	bl	8000a84 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d902      	bls.n	8001d86 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	f000 bee9 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 8001d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2cc>
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	e015      	b.n	8001de4 <HAL_RCC_OscConfig+0x2f8>
 8001db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001dd4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_RCC_OscConfig+0x330>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001de8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001dec:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001df0:	fa92 f2a2 	rbit	r2, r2
 8001df4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001df8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f002 021f 	and.w	r2, r2, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ab      	bne.n	8001d70 <HAL_RCC_OscConfig+0x284>
 8001e18:	e003      	b.n	8001e22 <HAL_RCC_OscConfig+0x336>
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 817d 	beq.w	8002132 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e38:	4ba6      	ldr	r3, [pc, #664]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e44:	4ba3      	ldr	r3, [pc, #652]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d172      	bne.n	8001f36 <HAL_RCC_OscConfig+0x44a>
 8001e50:	4ba0      	ldr	r3, [pc, #640]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d16c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x44a>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	095b      	lsrs	r3, r3, #5
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_OscConfig+0x3a0>
 8001e86:	4b93      	ldr	r3, [pc, #588]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	e013      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c8>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ea4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001eb0:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001eba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ec6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCC_OscConfig+0x410>
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f000 be2e 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b75      	ldr	r3, [pc, #468]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	21f8      	movs	r1, #248	; 0xf8
 8001f12:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f1a:	fa91 f1a1 	rbit	r1, r1
 8001f1e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f22:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f26:	fab1 f181 	clz	r1, r1
 8001f2a:	b2c9      	uxtb	r1, r1
 8001f2c:	408b      	lsls	r3, r1
 8001f2e:	4969      	ldr	r1, [pc, #420]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f34:	e0fd      	b.n	8002132 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8088 	beq.w	8002058 <HAL_RCC_OscConfig+0x56c>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2301      	movs	r3, #1
 8001f72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fd86 	bl	8000a84 <HAL_GetTick>
 8001f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fd81 	bl	8000a84 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f000 bde2 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001fa6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4d8>
 8001fbe:	4b45      	ldr	r3, [pc, #276]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x500>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2202      	movs	r2, #2
 8001fee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ff2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ffe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0af      	beq.n	8001f7e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	21f8      	movs	r1, #248	; 0xf8
 8002034:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800203c:	fa91 f1a1 	rbit	r1, r1
 8002040:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002044:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002048:	fab1 f181 	clz	r1, r1
 800204c:	b2c9      	uxtb	r1, r1
 800204e:	408b      	lsls	r3, r1
 8002050:	4920      	ldr	r1, [pc, #128]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
 8002056:	e06c      	b.n	8002132 <HAL_RCC_OscConfig+0x646>
 8002058:	2301      	movs	r3, #1
 800205a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800206a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002078:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	461a      	mov	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe fcfe 	bl	8000a84 <HAL_GetTick>
 8002088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208e:	f7fe fcf9 	bl	8000a84 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d902      	bls.n	80020a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	f000 bd5a 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d104      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5ec>
 80020ce:	4b01      	ldr	r3, [pc, #4]	; (80020d4 <HAL_RCC_OscConfig+0x5e8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	e015      	b.n	8002100 <HAL_RCC_OscConfig+0x614>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020fc:	4bc8      	ldr	r3, [pc, #800]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2202      	movs	r2, #2
 8002102:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002106:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800210a:	fa92 f2a2 	rbit	r2, r2
 800210e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002112:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002116:	fab2 f282 	clz	r2, r2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f002 021f 	and.w	r2, r2, #31
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ad      	bne.n	800208e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8110 	beq.w	8002368 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d079      	beq.n	800224c <HAL_RCC_OscConfig+0x760>
 8002158:	2301      	movs	r3, #1
 800215a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800216a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4bab      	ldr	r3, [pc, #684]	; (8002424 <HAL_RCC_OscConfig+0x938>)
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	461a      	mov	r2, r3
 800217e:	2301      	movs	r3, #1
 8002180:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7fe fc7f 	bl	8000a84 <HAL_GetTick>
 8002186:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe fc7a 	bl	8000a84 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d902      	bls.n	80021a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	f000 bcdb 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021e0:	2202      	movs	r2, #2
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fc:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 80021fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002208:	2102      	movs	r1, #2
 800220a:	6019      	str	r1, [r3, #0]
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f1a3 	rbit	r1, r3
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002222:	6019      	str	r1, [r3, #0]
  return result;
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0a0      	beq.n	800218c <HAL_RCC_OscConfig+0x6a0>
 800224a:	e08d      	b.n	8002368 <HAL_RCC_OscConfig+0x87c>
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800226e:	601a      	str	r2, [r3, #0]
  return result;
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002278:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x938>)
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	461a      	mov	r2, r3
 800228a:	2300      	movs	r3, #0
 800228c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fbf9 	bl	8000a84 <HAL_GetTick>
 8002292:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002298:	f7fe fbf4 	bl	8000a84 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d902      	bls.n	80022ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	f000 bc55 	b.w	8002b58 <HAL_RCC_OscConfig+0x106c>
 80022ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022da:	2202      	movs	r2, #2
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022fe:	2202      	movs	r2, #2
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002318:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 800231c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002326:	2102      	movs	r1, #2
 8002328:	6019      	str	r1, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f1a3 	rbit	r1, r3
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002340:	6019      	str	r1, [r3, #0]
  return result;
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d197      	bne.n	8002298 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 81a1 	beq.w	80026c0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a22      	ldr	r2, [pc, #136]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	61d3      	str	r3, [r2, #28]
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_RCC_OscConfig+0x93c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11a      	bne.n	8002400 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_RCC_OscConfig+0x93c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a16      	ldr	r2, [pc, #88]	; (8002428 <HAL_RCC_OscConfig+0x93c>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7fe fb55 	bl	8000a84 <HAL_GetTick>
 80023da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	e009      	b.n	80023f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e0:	f7fe fb50 	bl	8000a84 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e3b1      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_RCC_OscConfig+0x93c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d10d      	bne.n	800242c <HAL_RCC_OscConfig+0x940>
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a02      	ldr	r2, [pc, #8]	; (8002420 <HAL_RCC_OscConfig+0x934>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	e03c      	b.n	8002498 <HAL_RCC_OscConfig+0x9ac>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	10908120 	.word	0x10908120
 8002428:	40007000 	.word	0x40007000
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x96a>
 800243c:	4bc1      	ldr	r3, [pc, #772]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4ac0      	ldr	r2, [pc, #768]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	4bbe      	ldr	r3, [pc, #760]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4abd      	ldr	r2, [pc, #756]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 800244e:	f023 0304 	bic.w	r3, r3, #4
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e020      	b.n	8002498 <HAL_RCC_OscConfig+0x9ac>
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x994>
 8002466:	4bb7      	ldr	r3, [pc, #732]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4ab6      	ldr	r2, [pc, #728]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	4bb4      	ldr	r3, [pc, #720]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4ab3      	ldr	r2, [pc, #716]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x9ac>
 8002480:	4bb0      	ldr	r3, [pc, #704]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4aaf      	ldr	r2, [pc, #700]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	4bad      	ldr	r3, [pc, #692]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4aac      	ldr	r2, [pc, #688]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8081 	beq.w	80025ac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe faeb 	bl	8000a84 <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fae6 	bl	8000a84 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e345      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024d4:	2202      	movs	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024f8:	2202      	movs	r2, #2
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fa93 f2a3 	rbit	r2, r3
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002512:	601a      	str	r2, [r3, #0]
  return result;
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800251c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d102      	bne.n	8002538 <HAL_RCC_OscConfig+0xa4c>
 8002532:	4b84      	ldr	r3, [pc, #528]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	e013      	b.n	8002560 <HAL_RCC_OscConfig+0xa74>
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002540:	2202      	movs	r2, #2
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	4b79      	ldr	r3, [pc, #484]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002564:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002568:	2102      	movs	r1, #2
 800256a:	6011      	str	r1, [r2, #0]
 800256c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002570:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	fa92 f1a2 	rbit	r1, r2
 800257a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002582:	6011      	str	r1, [r2, #0]
  return result;
 8002584:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002588:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	fab2 f282 	clz	r2, r2
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f002 021f 	and.w	r2, r2, #31
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d084      	beq.n	80024b4 <HAL_RCC_OscConfig+0x9c8>
 80025aa:	e07f      	b.n	80026ac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fa6a 	bl	8000a84 <HAL_GetTick>
 80025b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	e00b      	b.n	80025ce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fa65 	bl	8000a84 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e2c4      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025d6:	2202      	movs	r2, #2
 80025d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002614:	601a      	str	r2, [r3, #0]
  return result;
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800261e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d102      	bne.n	800263a <HAL_RCC_OscConfig+0xb4e>
 8002634:	4b43      	ldr	r3, [pc, #268]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	e013      	b.n	8002662 <HAL_RCC_OscConfig+0xb76>
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002642:	2202      	movs	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002666:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800266a:	2102      	movs	r1, #2
 800266c:	6011      	str	r1, [r2, #0]
 800266e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002672:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	fa92 f1a2 	rbit	r1, r2
 800267c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002680:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002684:	6011      	str	r1, [r2, #0]
  return result;
 8002686:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800268a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	fab2 f282 	clz	r2, r2
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f002 021f 	and.w	r2, r2, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f202 	lsl.w	r2, r1, r2
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d184      	bne.n	80025b6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 80026ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8242 	beq.w	8002b56 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_RCC_OscConfig+0xc58>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b08      	cmp	r3, #8
 80026dc:	f000 8213 	beq.w	8002b06 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	f040 8162 	bne.w	80029b6 <HAL_RCC_OscConfig+0xeca>
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	fa93 f2a3 	rbit	r2, r3
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002716:	601a      	str	r2, [r3, #0]
  return result;
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002720:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800272c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	2300      	movs	r3, #0
 8002736:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe f9a4 	bl	8000a84 <HAL_GetTick>
 800273c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002740:	e00c      	b.n	800275c <HAL_RCC_OscConfig+0xc70>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe f99c 	bl	8000a84 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1fd      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002764:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	fa93 f2a3 	rbit	r2, r3
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002780:	601a      	str	r2, [r3, #0]
  return result;
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800278a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_OscConfig+0xcba>
 80027a0:	4bb0      	ldr	r3, [pc, #704]	; (8002a64 <HAL_RCC_OscConfig+0xf78>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e027      	b.n	80027f6 <HAL_RCC_OscConfig+0xd0a>
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	4b9c      	ldr	r3, [pc, #624]	; (8002a64 <HAL_RCC_OscConfig+0xf78>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002802:	6011      	str	r1, [r2, #0]
 8002804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002808:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	fa92 f1a2 	rbit	r1, r2
 8002812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002816:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800281a:	6011      	str	r1, [r2, #0]
  return result;
 800281c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002820:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d182      	bne.n	8002748 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002842:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	430b      	orrs	r3, r1
 8002864:	497f      	ldr	r1, [pc, #508]	; (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002872:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800288e:	601a      	str	r2, [r3, #0]
  return result;
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002898:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	461a      	mov	r2, r3
 80028ac:	2301      	movs	r3, #1
 80028ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f8e8 	bl	8000a84 <HAL_GetTick>
 80028b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b8:	e009      	b.n	80028ce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe f8e3 	bl	8000a84 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e144      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028f2:	601a      	str	r2, [r3, #0]
  return result;
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0xe2c>
 8002912:	4b54      	ldr	r3, [pc, #336]	; (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e027      	b.n	8002968 <HAL_RCC_OscConfig+0xe7c>
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800296c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002970:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002974:	6011      	str	r1, [r2, #0]
 8002976:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fa92 f1a2 	rbit	r1, r2
 8002984:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002988:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800298c:	6011      	str	r1, [r2, #0]
  return result;
 800298e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002992:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f042 0220 	orr.w	r2, r2, #32
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f002 021f 	and.w	r2, r2, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d082      	beq.n	80028ba <HAL_RCC_OscConfig+0xdce>
 80029b4:	e0cf      	b.n	8002b56 <HAL_RCC_OscConfig+0x106a>
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	fa93 f2a3 	rbit	r2, r3
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029da:	601a      	str	r2, [r3, #0]
  return result;
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	461a      	mov	r2, r3
 80029f8:	2300      	movs	r3, #0
 80029fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe f842 	bl	8000a84 <HAL_GetTick>
 8002a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a04:	e009      	b.n	8002a1a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe f83d 	bl	8000a84 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e09e      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f2a3 	rbit	r2, r3
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a3e:	601a      	str	r2, [r3, #0]
  return result;
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d104      	bne.n	8002a68 <HAL_RCC_OscConfig+0xf7c>
 8002a5e:	4b01      	ldr	r3, [pc, #4]	; (8002a64 <HAL_RCC_OscConfig+0xf78>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e029      	b.n	8002ab8 <HAL_RCC_OscConfig+0xfcc>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	fa93 f2a3 	rbit	r2, r3
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x1078>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002abc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ac0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ac4:	6011      	str	r1, [r2, #0]
 8002ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aca:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	fa92 f1a2 	rbit	r1, r2
 8002ad4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002adc:	6011      	str	r1, [r2, #0]
  return result;
 8002ade:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ae2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f042 0220 	orr.w	r2, r2, #32
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f002 021f 	and.w	r2, r2, #31
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d180      	bne.n	8002a06 <HAL_RCC_OscConfig+0xf1a>
 8002b04:	e027      	b.n	8002b56 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01e      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_OscConfig+0x1078>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b26:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d10b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b09e      	sub	sp, #120	; 0x78
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e162      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b90      	ldr	r3, [pc, #576]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d910      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b8d      	ldr	r3, [pc, #564]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	498b      	ldr	r1, [pc, #556]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e14a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b82      	ldr	r3, [pc, #520]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	497f      	ldr	r1, [pc, #508]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80dc 	beq.w	8002d94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d13c      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xf6>
 8002be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xa6>
 8002c08:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e00f      	b.n	8002c2e <HAL_RCC_ClockConfig+0xc6>
 8002c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	663b      	str	r3, [r7, #96]	; 0x60
 8002c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c32:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f042 0220 	orr.w	r2, r2, #32
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f002 021f 	and.w	r2, r2, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d17b      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0f3      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d13c      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x178>
 8002c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x128>
 8002c8a:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e00f      	b.n	8002cb0 <HAL_RCC_ClockConfig+0x148>
 8002c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cac:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb8:	fa92 f2a2 	rbit	r2, r2
 8002cbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d13a      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b2      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x1a0>
 8002d02:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	e00d      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1bc>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
 8002d14:	2302      	movs	r3, #2
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	2202      	movs	r2, #2
 8002d26:	61ba      	str	r2, [r7, #24]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	fa92 f2a2 	rbit	r2, r2
 8002d2e:	617a      	str	r2, [r7, #20]
  return result;
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	fab2 f282 	clz	r2, r2
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f042 0220 	orr.w	r2, r2, #32
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f002 021f 	and.w	r2, r2, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e079      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	491a      	ldr	r1, [pc, #104]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7fd fe8e 	bl	8000a84 <HAL_GetTick>
 8002d68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fd fe8a 	bl	8000a84 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e061      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d214      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 0207 	bic.w	r2, r3, #7
 8002daa:	4906      	ldr	r1, [pc, #24]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_RCC_ClockConfig+0x25c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e040      	b.n	8002e46 <HAL_RCC_ClockConfig+0x2de>
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	491a      	ldr	r1, [pc, #104]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4912      	ldr	r1, [pc, #72]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e0a:	f000 f829 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4601      	mov	r1, r0
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_RCC_ClockConfig+0x2e8>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	22f0      	movs	r2, #240	; 0xf0
 8002e1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	fa92 f2a2 	rbit	r2, r2
 8002e22:	60fa      	str	r2, [r7, #12]
  return result;
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	fab2 f282 	clz	r2, r2
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	40d3      	lsrs	r3, r2
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x2ec>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	fa21 f303 	lsr.w	r3, r1, r3
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_RCC_ClockConfig+0x2f0>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_RCC_ClockConfig+0x2f4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fddc 	bl	80009fc <HAL_InitTick>
  
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3778      	adds	r7, #120	; 0x78
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08003c14 	.word	0x08003c14
 8002e58:	2000000c 	.word	0x2000000c
 8002e5c:	20000010 	.word	0x20000010

08002e60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b08b      	sub	sp, #44	; 0x2c
 8002e64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e7a:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d002      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x30>
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0x36>
 8002e8e:	e03c      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e92:	623b      	str	r3, [r7, #32]
      break;
 8002e94:	e03c      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ea0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	607a      	str	r2, [r7, #4]
  return result;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	40d3      	lsrs	r3, r2
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	fa92 f2a2 	rbit	r2, r2
 8002ecc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	40d3      	lsrs	r3, r2
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef8:	e004      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4a0c      	ldr	r2, [pc, #48]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	623b      	str	r3, [r7, #32]
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f0c:	623b      	str	r3, [r7, #32]
      break;
 8002f0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	372c      	adds	r7, #44	; 0x2c
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	007a1200 	.word	0x007a1200
 8002f28:	08003c2c 	.word	0x08003c2c
 8002f2c:	08003c3c 	.word	0x08003c3c
 8002f30:	003d0900 	.word	0x003d0900

08002f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f52:	f7ff ffef 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f56:	4601      	mov	r1, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	fa92 f2a2 	rbit	r2, r2
 8002f6c:	603a      	str	r2, [r7, #0]
  return result;
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	fab2 f282 	clz	r2, r2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	40d3      	lsrs	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08003c24 	.word	0x08003c24

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f96:	f7ff ffcd 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f9a:	4601      	mov	r1, r0
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002fa4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002fa8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	fa92 f2a2 	rbit	r2, r2
 8002fb0:	603a      	str	r2, [r7, #0]
  return result;
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	fab2 f282 	clz	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	40d3      	lsrs	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08003c24 	.word	0x08003c24

08002fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b092      	sub	sp, #72	; 0x48
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80d4 	beq.w	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff8:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10e      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4a4a      	ldr	r2, [pc, #296]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300e:	61d3      	str	r3, [r2, #28]
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b45      	ldr	r3, [pc, #276]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b42      	ldr	r3, [pc, #264]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a41      	ldr	r2, [pc, #260]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fd fd23 	bl	8000a84 <HAL_GetTick>
 800303e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fd fd1f 	bl	8000a84 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	; 0x64
 800304e:	d901      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e169      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	4b38      	ldr	r3, [pc, #224]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8084 	beq.w	800317a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800307c:	429a      	cmp	r2, r3
 800307e:	d07c      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	461a      	mov	r2, r3
 80030aa:	2301      	movs	r3, #1
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	461a      	mov	r2, r3
 80030ce:	2300      	movs	r3, #0
 80030d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d04b      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fd fccf 	bl	8000a84 <HAL_GetTick>
 80030e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	e00a      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fd fccb 	bl	8000a84 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e113      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003100:	2302      	movs	r3, #2
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	2302      	movs	r3, #2
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	61fb      	str	r3, [r7, #28]
  return result;
 8003118:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d108      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800312e:	4b01      	ldr	r3, [pc, #4]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	e00d      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003134:	40021000 	.word	0x40021000
 8003138:	40007000 	.word	0x40007000
 800313c:	10908100 	.word	0x10908100
 8003140:	2302      	movs	r3, #2
 8003142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	4b78      	ldr	r3, [pc, #480]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	2202      	movs	r2, #2
 8003152:	613a      	str	r2, [r7, #16]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	fa92 f2a2 	rbit	r2, r2
 800315a:	60fa      	str	r2, [r7, #12]
  return result;
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	fab2 f282 	clz	r2, r2
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f002 021f 	and.w	r2, r2, #31
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f202 	lsl.w	r2, r1, r2
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0b7      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800317a:	4b6d      	ldr	r3, [pc, #436]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	496a      	ldr	r1, [pc, #424]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800318c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003194:	4b66      	ldr	r3, [pc, #408]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4a65      	ldr	r2, [pc, #404]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ac:	4b60      	ldr	r3, [pc, #384]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	f023 0203 	bic.w	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	495d      	ldr	r1, [pc, #372]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ca:	4b59      	ldr	r3, [pc, #356]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4956      	ldr	r1, [pc, #344]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031e8:	4b51      	ldr	r3, [pc, #324]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	494e      	ldr	r1, [pc, #312]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003206:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f023 0210 	bic.w	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4947      	ldr	r1, [pc, #284]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	493f      	ldr	r1, [pc, #252]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003242:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f023 0220 	bic.w	r2, r3, #32
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4938      	ldr	r1, [pc, #224]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003260:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	4930      	ldr	r1, [pc, #192]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	4929      	ldr	r1, [pc, #164]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800328c:	4313      	orrs	r3, r2
 800328e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800329c:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4921      	ldr	r1, [pc, #132]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	491a      	ldr	r1, [pc, #104]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	4912      	ldr	r1, [pc, #72]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	490b      	ldr	r1, [pc, #44]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003304:	4313      	orrs	r3, r2
 8003306:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	4903      	ldr	r1, [pc, #12]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3748      	adds	r7, #72	; 0x48
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e040      	b.n	80033c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd fa10 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	; 0x24
 8003360:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f82c 	bl	80033d0 <UART_SetConfig>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e022      	b.n	80033c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f9f4 	bl	8003778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fa7b 	bl	80038bc <UART_CheckIdleState>
 80033c6:	4603      	mov	r3, r0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033fe:	f023 030c 	bic.w	r3, r3, #12
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	430b      	orrs	r3, r1
 800340a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4aa7      	ldr	r2, [pc, #668]	; (80036e8 <UART_SetConfig+0x318>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d120      	bne.n	8003492 <UART_SetConfig+0xc2>
 8003450:	4ba6      	ldr	r3, [pc, #664]	; (80036ec <UART_SetConfig+0x31c>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b03      	cmp	r3, #3
 800345a:	d817      	bhi.n	800348c <UART_SetConfig+0xbc>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <UART_SetConfig+0x94>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003475 	.word	0x08003475
 8003468:	08003481 	.word	0x08003481
 800346c:	08003487 	.word	0x08003487
 8003470:	0800347b 	.word	0x0800347b
 8003474:	2301      	movs	r3, #1
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e0b5      	b.n	80035e6 <UART_SetConfig+0x216>
 800347a:	2302      	movs	r3, #2
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e0b2      	b.n	80035e6 <UART_SetConfig+0x216>
 8003480:	2304      	movs	r3, #4
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e0af      	b.n	80035e6 <UART_SetConfig+0x216>
 8003486:	2308      	movs	r3, #8
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e0ac      	b.n	80035e6 <UART_SetConfig+0x216>
 800348c:	2310      	movs	r3, #16
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e0a9      	b.n	80035e6 <UART_SetConfig+0x216>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a96      	ldr	r2, [pc, #600]	; (80036f0 <UART_SetConfig+0x320>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d124      	bne.n	80034e6 <UART_SetConfig+0x116>
 800349c:	4b93      	ldr	r3, [pc, #588]	; (80036ec <UART_SetConfig+0x31c>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034a8:	d011      	beq.n	80034ce <UART_SetConfig+0xfe>
 80034aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034ae:	d817      	bhi.n	80034e0 <UART_SetConfig+0x110>
 80034b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034b4:	d011      	beq.n	80034da <UART_SetConfig+0x10a>
 80034b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ba:	d811      	bhi.n	80034e0 <UART_SetConfig+0x110>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <UART_SetConfig+0xf8>
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d006      	beq.n	80034d4 <UART_SetConfig+0x104>
 80034c6:	e00b      	b.n	80034e0 <UART_SetConfig+0x110>
 80034c8:	2300      	movs	r3, #0
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e08b      	b.n	80035e6 <UART_SetConfig+0x216>
 80034ce:	2302      	movs	r3, #2
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e088      	b.n	80035e6 <UART_SetConfig+0x216>
 80034d4:	2304      	movs	r3, #4
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e085      	b.n	80035e6 <UART_SetConfig+0x216>
 80034da:	2308      	movs	r3, #8
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e082      	b.n	80035e6 <UART_SetConfig+0x216>
 80034e0:	2310      	movs	r3, #16
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e07f      	b.n	80035e6 <UART_SetConfig+0x216>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a82      	ldr	r2, [pc, #520]	; (80036f4 <UART_SetConfig+0x324>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d124      	bne.n	800353a <UART_SetConfig+0x16a>
 80034f0:	4b7e      	ldr	r3, [pc, #504]	; (80036ec <UART_SetConfig+0x31c>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80034f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034fc:	d011      	beq.n	8003522 <UART_SetConfig+0x152>
 80034fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003502:	d817      	bhi.n	8003534 <UART_SetConfig+0x164>
 8003504:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003508:	d011      	beq.n	800352e <UART_SetConfig+0x15e>
 800350a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800350e:	d811      	bhi.n	8003534 <UART_SetConfig+0x164>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <UART_SetConfig+0x14c>
 8003514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003518:	d006      	beq.n	8003528 <UART_SetConfig+0x158>
 800351a:	e00b      	b.n	8003534 <UART_SetConfig+0x164>
 800351c:	2300      	movs	r3, #0
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e061      	b.n	80035e6 <UART_SetConfig+0x216>
 8003522:	2302      	movs	r3, #2
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e05e      	b.n	80035e6 <UART_SetConfig+0x216>
 8003528:	2304      	movs	r3, #4
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e05b      	b.n	80035e6 <UART_SetConfig+0x216>
 800352e:	2308      	movs	r3, #8
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e058      	b.n	80035e6 <UART_SetConfig+0x216>
 8003534:	2310      	movs	r3, #16
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e055      	b.n	80035e6 <UART_SetConfig+0x216>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <UART_SetConfig+0x328>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d124      	bne.n	800358e <UART_SetConfig+0x1be>
 8003544:	4b69      	ldr	r3, [pc, #420]	; (80036ec <UART_SetConfig+0x31c>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800354c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003550:	d011      	beq.n	8003576 <UART_SetConfig+0x1a6>
 8003552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003556:	d817      	bhi.n	8003588 <UART_SetConfig+0x1b8>
 8003558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800355c:	d011      	beq.n	8003582 <UART_SetConfig+0x1b2>
 800355e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003562:	d811      	bhi.n	8003588 <UART_SetConfig+0x1b8>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <UART_SetConfig+0x1a0>
 8003568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356c:	d006      	beq.n	800357c <UART_SetConfig+0x1ac>
 800356e:	e00b      	b.n	8003588 <UART_SetConfig+0x1b8>
 8003570:	2300      	movs	r3, #0
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e037      	b.n	80035e6 <UART_SetConfig+0x216>
 8003576:	2302      	movs	r3, #2
 8003578:	77fb      	strb	r3, [r7, #31]
 800357a:	e034      	b.n	80035e6 <UART_SetConfig+0x216>
 800357c:	2304      	movs	r3, #4
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e031      	b.n	80035e6 <UART_SetConfig+0x216>
 8003582:	2308      	movs	r3, #8
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e02e      	b.n	80035e6 <UART_SetConfig+0x216>
 8003588:	2310      	movs	r3, #16
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e02b      	b.n	80035e6 <UART_SetConfig+0x216>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a5a      	ldr	r2, [pc, #360]	; (80036fc <UART_SetConfig+0x32c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d124      	bne.n	80035e2 <UART_SetConfig+0x212>
 8003598:	4b54      	ldr	r3, [pc, #336]	; (80036ec <UART_SetConfig+0x31c>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80035a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a4:	d011      	beq.n	80035ca <UART_SetConfig+0x1fa>
 80035a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035aa:	d817      	bhi.n	80035dc <UART_SetConfig+0x20c>
 80035ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b0:	d011      	beq.n	80035d6 <UART_SetConfig+0x206>
 80035b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b6:	d811      	bhi.n	80035dc <UART_SetConfig+0x20c>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <UART_SetConfig+0x1f4>
 80035bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c0:	d006      	beq.n	80035d0 <UART_SetConfig+0x200>
 80035c2:	e00b      	b.n	80035dc <UART_SetConfig+0x20c>
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e00d      	b.n	80035e6 <UART_SetConfig+0x216>
 80035ca:	2302      	movs	r3, #2
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e00a      	b.n	80035e6 <UART_SetConfig+0x216>
 80035d0:	2304      	movs	r3, #4
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e007      	b.n	80035e6 <UART_SetConfig+0x216>
 80035d6:	2308      	movs	r3, #8
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e004      	b.n	80035e6 <UART_SetConfig+0x216>
 80035dc:	2310      	movs	r3, #16
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e001      	b.n	80035e6 <UART_SetConfig+0x216>
 80035e2:	2310      	movs	r3, #16
 80035e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ee:	d15b      	bne.n	80036a8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80035f0:	7ffb      	ldrb	r3, [r7, #31]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d827      	bhi.n	8003646 <UART_SetConfig+0x276>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0x22c>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003621 	.word	0x08003621
 8003600:	08003629 	.word	0x08003629
 8003604:	08003631 	.word	0x08003631
 8003608:	08003647 	.word	0x08003647
 800360c:	08003637 	.word	0x08003637
 8003610:	08003647 	.word	0x08003647
 8003614:	08003647 	.word	0x08003647
 8003618:	08003647 	.word	0x08003647
 800361c:	0800363f 	.word	0x0800363f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003620:	f7ff fc94 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8003624:	61b8      	str	r0, [r7, #24]
        break;
 8003626:	e013      	b.n	8003650 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7ff fcb2 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 800362c:	61b8      	str	r0, [r7, #24]
        break;
 800362e:	e00f      	b.n	8003650 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003630:	4b33      	ldr	r3, [pc, #204]	; (8003700 <UART_SetConfig+0x330>)
 8003632:	61bb      	str	r3, [r7, #24]
        break;
 8003634:	e00c      	b.n	8003650 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003636:	f7ff fc13 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 800363a:	61b8      	str	r0, [r7, #24]
        break;
 800363c:	e008      	b.n	8003650 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	61bb      	str	r3, [r7, #24]
        break;
 8003644:	e004      	b.n	8003650 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	77bb      	strb	r3, [r7, #30]
        break;
 800364e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8082 	beq.w	800375c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	005a      	lsls	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	441a      	add	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d916      	bls.n	80036a2 <UART_SetConfig+0x2d2>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d212      	bcs.n	80036a2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	b29b      	uxth	r3, r3
 8003680:	f023 030f 	bic.w	r3, r3, #15
 8003684:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	b29b      	uxth	r3, r3
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	b29a      	uxth	r2, r3
 8003692:	89fb      	ldrh	r3, [r7, #14]
 8003694:	4313      	orrs	r3, r2
 8003696:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	89fa      	ldrh	r2, [r7, #14]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	e05c      	b.n	800375c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	77bb      	strb	r3, [r7, #30]
 80036a6:	e059      	b.n	800375c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036a8:	7ffb      	ldrb	r3, [r7, #31]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d835      	bhi.n	800371a <UART_SetConfig+0x34a>
 80036ae:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0x2e4>)
 80036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b4:	080036d9 	.word	0x080036d9
 80036b8:	080036e1 	.word	0x080036e1
 80036bc:	08003705 	.word	0x08003705
 80036c0:	0800371b 	.word	0x0800371b
 80036c4:	0800370b 	.word	0x0800370b
 80036c8:	0800371b 	.word	0x0800371b
 80036cc:	0800371b 	.word	0x0800371b
 80036d0:	0800371b 	.word	0x0800371b
 80036d4:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7ff fc38 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80036dc:	61b8      	str	r0, [r7, #24]
        break;
 80036de:	e021      	b.n	8003724 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e0:	f7ff fc56 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 80036e4:	61b8      	str	r0, [r7, #24]
        break;
 80036e6:	e01d      	b.n	8003724 <UART_SetConfig+0x354>
 80036e8:	40013800 	.word	0x40013800
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40004400 	.word	0x40004400
 80036f4:	40004800 	.word	0x40004800
 80036f8:	40004c00 	.word	0x40004c00
 80036fc:	40005000 	.word	0x40005000
 8003700:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <UART_SetConfig+0x3a4>)
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e00c      	b.n	8003724 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7ff fba9 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 800370e:	61b8      	str	r0, [r7, #24]
        break;
 8003710:	e008      	b.n	8003724 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e004      	b.n	8003724 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	77bb      	strb	r3, [r7, #30]
        break;
 8003722:	bf00      	nop
    }

    if (pclk != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d018      	beq.n	800375c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	085a      	lsrs	r2, r3, #1
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	441a      	add	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d909      	bls.n	8003758 <UART_SetConfig+0x388>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374a:	d205      	bcs.n	8003758 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e001      	b.n	800375c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003768:	7fbb      	ldrb	r3, [r7, #30]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	007a1200 	.word	0x007a1200

08003778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01a      	beq.n	800388e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003876:	d10a      	bne.n	800388e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
  }
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b098      	sub	sp, #96	; 0x60
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038cc:	f7fd f8da 	bl	8000a84 <HAL_GetTick>
 80038d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d12e      	bne.n	800393e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f88c 	bl	8003a0c <UART_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d021      	beq.n	800393e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390e:	653b      	str	r3, [r7, #80]	; 0x50
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
 800391a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800391e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e6      	bne.n	80038fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e062      	b.n	8003a04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d149      	bne.n	80039e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003954:	2200      	movs	r2, #0
 8003956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f856 	bl	8003a0c <UART_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d03c      	beq.n	80039e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	623b      	str	r3, [r7, #32]
   return(result);
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003984:	633b      	str	r3, [r7, #48]	; 0x30
 8003986:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800398a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e6      	bne.n	8003966 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b8:	61fa      	str	r2, [r7, #28]
 80039ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	617b      	str	r3, [r7, #20]
   return(result);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e5      	bne.n	8003998 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e011      	b.n	8003a04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3758      	adds	r7, #88	; 0x58
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1c:	e049      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a24:	d045      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7fd f82d 	bl	8000a84 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e048      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d031      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d110      	bne.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2208      	movs	r2, #8
 8003a62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f838 	bl	8003ada <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e029      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	d111      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f81e 	bl	8003ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e00f      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d0a6      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b095      	sub	sp, #84	; 0x54
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	643b      	str	r3, [r7, #64]	; 0x40
 8003b02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d118      	bne.n	8003b82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f023 0310 	bic.w	r3, r3, #16
 8003b64:	647b      	str	r3, [r7, #68]	; 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e6      	bne.n	8003b50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b96:	bf00      	nop
 8003b98:	3754      	adds	r7, #84	; 0x54
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <memset>:
 8003ba2:	4402      	add	r2, r0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d100      	bne.n	8003bac <memset+0xa>
 8003baa:	4770      	bx	lr
 8003bac:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb0:	e7f9      	b.n	8003ba6 <memset+0x4>
	...

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4d0d      	ldr	r5, [pc, #52]	; (8003bec <__libc_init_array+0x38>)
 8003bb8:	4c0d      	ldr	r4, [pc, #52]	; (8003bf0 <__libc_init_array+0x3c>)
 8003bba:	1b64      	subs	r4, r4, r5
 8003bbc:	10a4      	asrs	r4, r4, #2
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	42a6      	cmp	r6, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	4d0b      	ldr	r5, [pc, #44]	; (8003bf4 <__libc_init_array+0x40>)
 8003bc6:	4c0c      	ldr	r4, [pc, #48]	; (8003bf8 <__libc_init_array+0x44>)
 8003bc8:	f000 f818 	bl	8003bfc <_init>
 8003bcc:	1b64      	subs	r4, r4, r5
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	2600      	movs	r6, #0
 8003bd2:	42a6      	cmp	r6, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bdc:	4798      	blx	r3
 8003bde:	3601      	adds	r6, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be6:	4798      	blx	r3
 8003be8:	3601      	adds	r6, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	08003c4c 	.word	0x08003c4c
 8003bf0:	08003c4c 	.word	0x08003c4c
 8003bf4:	08003c4c 	.word	0x08003c4c
 8003bf8:	08003c50 	.word	0x08003c50

08003bfc <_init>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr

08003c08 <_fini>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	bf00      	nop
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr
